# This workflow will do a clean install of bun dependencies, build the source code and run tests across different versions of bun
# For more information see: https://github.com/oven-sh/setup-bun

name: Continuous integration and deployment

on:
  push:
    branches:
      - main
    tags:
      - '*'

  pull_request:
    branches:
      - main

jobs:
  # "build" job will build artifacts for production.
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bun-version: [latest]

    steps:
      - name: Checking out for ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Using Bun ${{ matrix.bun-version }}
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Running version-from-git --no-git-tag-version
        if: ${{ startsWith(github.ref, 'refs/heads/') }}
        run: bun x version-from-git --no-git-tag-version

      - name: Installing dependencies
        run: bun install

      - name: Setting package version
        run: |
          VERSION=$(cat package.json | jq -r .version)
          echo "Using version: $VERSION"
          # Update all workspace package versions to match root package.json
          bun x workspaces-update-version $VERSION --force-publish --no-git-tag-version --no-push --yes

      - name: Building for production
        env:
          NODE_ENV: production
          SKIP_PREFLIGHT_CHECK: 'true'
        run: bun run build --if-present

      - name: Copying documents
        run: |
          cp CHANGELOG.md packages/component
          cp LICENSE packages/component
          cp README.md packages/component

      - name: Running bun pack
        run: |
          cd packages/component
          bun pack

      - name: Uploading npm-tarball
        uses: actions/upload-artifact@v3
        with:
          name: npm-tarball
          path: 'packages/component/*.tgz'

      - name: Uploading gh-pages
        uses: actions/upload-artifact@v3
        with:
          name: gh-pages
          path: 'packages/playground/build/**/*'

  # "test" job will only run when not deploying, will build for instrumentation.
  test:
    if: ${{ !startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bun-version: [latest, canary]

    steps:
      - name: Checking out for ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Using Bun ${{ matrix.bun-version }}
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Running version-from-git --no-git-tag-version
        if: ${{ startsWith(github.ref, 'refs/heads/') }}
        run: bun x version-from-git --no-git-tag-version

      - name: Installing dependencies
        run: bun install

      - name: Setting package version
        run: |
          VERSION=$(cat package.json | jq -r .version)
          echo "Using version: $VERSION"
          # Update all workspace package versions to match root package.json
          bun x workspaces-update-version $VERSION --force-publish --no-git-tag-version --no-push --yes

      - name: Running static code analysis
        run: |
          cd packages/component
          bun run precommit src/

      - name: Building for instrumentation
        env:
          NODE_ENV: test
          SKIP_PREFLIGHT_CHECK: 'true'
        run: bun run build --if-present

      - name: Starting Docker Compose
        run: bun run docker:up -- --detach

      - name: Testing
        run: bun test -- --coverage

      - if: always()
        name: Stopping Docker Compose
        run: bun run docker:down

  # "public" job will only run when merging a commit or tag.
  # It does not depends on "test" because we assume it already passed pull request status checks and "test" can be unreliable at times.
  publish:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Downloading npm-tarball
        uses: actions/download-artifact@v3
        with:
          name: npm-tarball

      - name: Downloading gh-pages
        uses: actions/download-artifact@v3
        with:
          name: gh-pages
          path: gh-pages/

      - name: Reading package.json
        id: read-package-json
        run: |
          echo "name=$(tar xOf *.tgz package/package.json | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "version=$(tar xOf *.tgz package/package.json | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "tarball=$(ls *.tgz)" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Using Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Publishing ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }}
        run: |
          bun config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          bun publish *.tgz --tag main

      - name: Tagging dist-tag ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }} latest
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          bun dist-tag add ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }} latest

      - name: Drafting a new release
        uses: actions/create-release@v1
        id: create-release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: '[${{ steps.read-package-json.outputs.version }}] - ${{ steps.read-package-json.outputs.date }}'
          draft: true

      - name: Uploading tarball to release
        uses: actions/upload-release-asset@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./${{ steps.read-package-json.outputs.tarball }}
          asset_name: ${{ steps.read-package-json.outputs.tarball }}
          asset_content_type: application/octet-stream

      - name: Deploying to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages/
